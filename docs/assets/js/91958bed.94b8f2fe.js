"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[459],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,b=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(b,s(s({ref:t},p),{},{components:r})):n.createElement(b,s({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2527:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),s=["components"],i={sidebar_position:2},c=void 0,l={unversionedId:"Algorithm implementation/Operator",id:"Algorithm implementation/Operator",title:"Operator",description:"Operator abstract classes and abstract methods",source:"@site/docs/Algorithm implementation/Operator.md",sourceDirName:"Algorithm implementation",slug:"/Algorithm implementation/Operator",permalink:"/IGAOD/Algorithm implementation/Operator",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Genetic Algorithm",permalink:"/IGAOD/Algorithm implementation/Genetic Algorithm"},next:{title:"Create application scenarios",permalink:"/IGAOD/Software Development Guide/Create application scenarios"}},p={},m=[{value:"Operator abstract classes and abstract methods",id:"operator-abstract-classes-and-abstract-methods",level:2}],u={toc:m};function d(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"operator-abstract-classes-and-abstract-methods"},"Operator abstract classes and abstract methods"),(0,a.kt)("p",null,"Genetic algorithm is designed using template design pattern. Concrete genetic operators are constructed by inheriting the following abstract classes while implementing abstract methods"),(0,a.kt)("p",null,"Select operator abstract class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"public abstract class Selection {\n    protected abstract Chromosome select(Population population);\n}\n")),(0,a.kt)("p",null,"Crossover operator abstract class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"public abstract class Crossover {\n    public abstract ChromosomePair crossover(Chromosome c1,Chromosome c2);\n}\n")),(0,a.kt)("p",null,"Mutation operator abstract class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"public abstract class Mutation {\n    protected abstract Chromosome mutate(Chromosome chromosome);\n}\n")),(0,a.kt)("p",null,"By inheriting abstract classes and implementing specific algorithms, we can achieve algorithm improvements in the following ways. Such as roulette algorithm, two-point crossover, simple mutation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"public class RouletteSelection extends Selection {\n    @Override\n    protected Chromosome select(Population population) {\n        //\u5177\u4f53\u7b97\u6cd5\u5b9e\u73b0\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"public class TwoPointCrossover<T> extends Crossover {\n    @Override\n    public ChromosomePair crossover(Chromosome c1, Chromosome c2) {\n        //\u5177\u4f53\u7b97\u6cd5\u5b9e\u73b0\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"public class SimpleMutation extends Mutation {\n    @Override\n    protected Chromosome mutate(Chromosome chromosome) {\n      //\u5177\u4f53\u7b97\u6cd5\u5b9e\u73b0\n    }\n}\n\n")))}d.isMDXComponent=!0}}]);