"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[145],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,d=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return n?o.createElement(d,s(s({ref:t},m),{},{components:n})):o.createElement(d,s({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=p;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8121:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],a={sidebar_position:1},l=void 0,c={unversionedId:"Algorithm implementation/Genetic Algorithm",id:"Algorithm implementation/Genetic Algorithm",title:"Genetic Algorithm",description:"Genetic Algorithm Class",source:"@site/docs/Algorithm implementation/Genetic Algorithm.md",sourceDirName:"Algorithm implementation",slug:"/Algorithm implementation/Genetic Algorithm",permalink:"/IGAOD/Algorithm implementation/Genetic Algorithm",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Page introduction",permalink:"/IGAOD/Project Introduction/Page introduction"},next:{title:"Operator",permalink:"/IGAOD/Algorithm implementation/Operator"}},m={},u=[{value:"Genetic Algorithm Class",id:"genetic-algorithm-class",level:2},{value:"Application",id:"application",level:2},{value:"Chromosome class",id:"chromosome-class",level:2},{value:"Chromosome pair class",id:"chromosome-pair-class",level:2},{value:"Population class",id:"population-class",level:2},{value:"UML diagram",id:"uml-diagram",level:2}],p={toc:u};function h(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"genetic-algorithm-class"},"Genetic Algorithm Class"),(0,i.kt)("p",null,"The population is evolved by calling GeneticAlgorithm.evolve(). The specific implementation of the GA class is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"public class GeneticAlgorithm {\n    private final Selection selection;  //selection operator\n    private final Crossover crossover;  //crossover operator\n    private final Mutation mutation;    // mutation operator\n    private final double crossoverRate; //crossover rate\n    private final double mutationRate;  //mutation rate\n\n    public GeneticAlgorithm(Selection selection, Crossover crossover, Mutation mutation, double crossoverRate, double mutationRate) {\n        this.selection = selection;\n        this.mutation = mutation;\n        this.crossover = crossover;\n        this.mutationRate = mutationRate;\n        this.crossoverRate = crossoverRate;\n    }\n\n    public Population evolve(Population population) {\n         //\u79cd\u7fa4\u6f14\u5316\n        List<Chromosome> nextGeneration = new ArrayList<>();\n        while (nextGeneration.size() < population.size()) {\n            Chromosome c1 = selection.select(population);\n            Chromosome c2 = selection.select(population);\n            ChromosomePair pair = new ChromosomePair(c1, c2);\n            if (randomGenerator.nextDouble() < crossoverRate) {\n                pair = this.crossover.crossover(c1, c2);\n            }\n            Chromosome first = pair.getFirst();\n            Chromosome second = pair.getSecond();\n            if (randomGenerator.nextDouble() < mutationRate) {\n                first = mutation.mutate(first);\n            }\n            if (randomGenerator.nextDouble() < mutationRate) {\n                second = mutation.mutate(second);\n            }\n            nextGeneration.add(first);\n            if (nextGeneration.size() < population.size()) {\n                nextGeneration.add(second);\n            }\n        }\n        return new Population(nextGeneration);\n    }\n}\n")),(0,i.kt)("h2",{id:"application"},"Application"),(0,i.kt)("p",null,"GeneticAlgorithm is instantiated with parameters and evolve function is called to generate a new population."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"  GeneticAlgorithm ga = new GeneticAlgorithm(selection, crossover, mutation, crossoverRate, mutationRate);\n  Population newPopulation = ga.evolve(population);\n")),(0,i.kt)("h2",{id:"chromosome-class"},"Chromosome class"),(0,i.kt)("p",null,"After encoding each individual, use the encoded gene sequence to construct the individual's gene class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"public class Chromosome<T> {\n    private final List<T> sequence;\n    private final Integer fitness;\n    public Chromosome(List<T> list, Integer fitness) {\n        this.sequence = list;\n        this.fitness = fitness;\n    }\n    \n    public Chromosome(List<T> list) {\n        this.sequence = list;\n        this.fitness = 5;\n    }\n    \n    public List<T> getSequence(){\n        return this.sequence;\n    }\n    \n    public Integer getFitness(){\n        return fitness;\n    }\n}\n")),(0,i.kt)("h2",{id:"chromosome-pair-class"},"Chromosome pair class"),(0,i.kt)("p",null,"Gene needs two gene sequences to be carried out at the same time during the crossover process, so a Chromosome packaging class is required"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"@Getter\npublic class ChromosomePair {\n    private final Chromosome first;\n    private final Chromosome second;\n\n    public ChromosomePair(Chromosome c1, Chromosome c2) {\n        this.first = c1;\n        this.second = c2;\n    }\n\n}\n")),(0,i.kt)("h2",{id:"population-class"},"Population class"),(0,i.kt)("p",null,"Build a population from a list of chromosomes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"public class Population {\n\n    private List<Chromosome> chromosomes;\n\n    public Population(List<Chromosome> chromosomes) {\n        this.chromosomes = chromosomes;\n    }\n\n    public int size(){\n        return chromosomes.size();\n    }\n\n    public Chromosome getChromosome(int index){\n        return chromosomes.get(index);\n    }\n\n    public List<Chromosome> getChromosomes(){\n        return Collections.unmodifiableList(this.chromosomes);\n    }\n    \n}\n")),(0,i.kt)("h2",{id:"uml-diagram"},"UML diagram"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"UML diagram",src:n(3352).Z,width:"2780",height:"2301"})))}h.isMDXComponent=!0},3352:function(e,t,n){t.Z=n.p+"assets/images/3-c5d8d879ac6cc04b5e5080aa20ccddf8.png"}}]);